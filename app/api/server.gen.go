// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return all tasks
	// (GET /tasks)
	GetTasks(ctx echo.Context) error
	// Create new task
	// (POST /tasks)
	PostTask(ctx echo.Context) error
	// Delete task by UUID
	// (DELETE /tasks/{uuid})
	DeleteTask(ctx echo.Context, uuid string) error
	// Return task with UUID
	// (GET /tasks/{uuid})
	GetTask(ctx echo.Context, uuid string) error
	// Replace task by UUID
	// (PUT /tasks/{uuid})
	ReplaceTask(ctx echo.Context, uuid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetTasks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTasks(ctx)
	return err
}

// PostTask converts echo context to params.
func (w *ServerInterfaceWrapper) PostTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTask(ctx)
	return err
}

// DeleteTask converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTask(ctx, uuid)
	return err
}

// GetTask converts echo context to params.
func (w *ServerInterfaceWrapper) GetTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTask(ctx, uuid)
	return err
}

// ReplaceTask converts echo context to params.
func (w *ServerInterfaceWrapper) ReplaceTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplaceTask(ctx, uuid)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/tasks", wrapper.GetTasks)
	router.POST(baseURL+"/tasks", wrapper.PostTask)
	router.DELETE(baseURL+"/tasks/:uuid", wrapper.DeleteTask)
	router.GET(baseURL+"/tasks/:uuid", wrapper.GetTask)
	router.PUT(baseURL+"/tasks/:uuid", wrapper.ReplaceTask)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTW/bOBD9K8TsHnYB2bId7brVrU2AIEXaBElzCnygqbHNhCJZcuTUMPTfC1Ky688A",
	"KZr20pMYcr7em/cQL0GY0hqNmjzkS/BihiWPx3Okz9w/hqN1xqIjifGhQC+ctCSNDn/iV15ahZDDpXFY",
	"Mml9VbLCKOOYl8R4iZQwYbRHQqoc87yQ1guppwyVJJcwjwUrJC8hAVrYUMqTk3oKdQIkKRTf7CMUch3S",
	"HyWJGepDaVUli+2sbPL/+GQ8GXYGfT7sZOPspDPmw6yDbzHLBvhm+B8f7FeqE3D4pZIOC8jv22na8qN1",
	"tBk/oKDQ99r4P7QdoW1Uh3upJ2aPDzg1RRjtzDwY9u76AtYIDrzM0fkmq9ftdfthbmNRcyshh5Nur9uD",
	"BCynWeQ9Je4f42mKFD5hKTy0vSggX8ncQ5jY28B3DB70euEjjCbUMY9bq6SImemDb7bY+CWcJGEZE/92",
	"OIEc/kq/OyttbZWuPFWvCePO8QVEYrYJuZSemJkwrhRrEIQYX5UldwvI4SaIQm8+J2CNP4BwLclmJ+jp",
	"vSkWLwL3HKZ1+Xp76+QqrPdI7f+0vmsu97m7rYRA7yeVUgsmHHLCYoe+03jLND5F+uJro5R0GUxQNxJV",
	"SLjP6Fm8bzm13AWvovOQ3y9BhgGC+CABzcuw42iqXWqSDZi75hkd1uI2yNCeNRMWYflZLzsSpA2xian0",
	"LgcNjIifjRfs7u7iLBR6zia/FO9ry+Qcia3s+HL2WgNG9p4kzdb82eoAfzdoFRevrZnf7e5jMnUN+lan",
	"x6I+3F59YlLPuZLFj+4k9tmRdIxBN1/RvV3wKh64Yk0I23hNGHanXfaRS83+sc4UlQjX/7ah4XeAU5DD",
	"jMjmadr+0+wKU6bzPtSj+lsAAAD//yiGzhhfCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
